{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/temp.svg","assets/hum.svg","assets/light.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sensors","clearInterval","timer","_this2","setInterval","getValues","_this3","fetch","then","res","json","setState","console","log","process","ip","react_default","a","createElement","className","src","temp","alt","width","map","sensor","length","hum","light","height","es","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","responsiveAnimationDuration","maintainAspectRatio","scales","xAxes","gridLines","display","color","ticks","fontColor","yAxes","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.27c8fbee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport './App.css';\nimport temp from './assets/temp.svg';\nimport hum from './assets/hum.svg';\nimport light from './assets/light.svg';\n\n// interval between refresh\nconst interval = 3000;\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsensors: []\n\t\t}\n\t}\n\n\t// when component fetched reset the timer\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t\tthis.timer = null;\n\t  }\n\n\t// send get reuest every 1sec\n\tcomponentDidMount() {\n\t\tthis.timer = setInterval(() => this.getValues(), interval);\n\t}\n\n\t// get the values from the response and set the state\n\tgetValues() {\n\t\t// When using the app locally\n\t\t//fetch('localhost:5000/api/sensors')\n\t\t\n\t\t// When using the app globally\n\t\tfetch('https://us-east-1.aws.webhooks.mongodb-stitch.com/api/client/v2.0/app/sensor-dashboard-fyqrv/service/http/incoming_webhook/webhook0')\n\t\t.then(res => res.json())\n\t\t.then(sensors => this.setState({sensors}, function() {\n\t\t\tconsole.log('sensors fetched...', sensors);\n\t\t\tconsole.log(process.env.ip);\n\t\t}));\n\t}\n\n\trender() {\n\t\treturn(\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\n\t\t\t\t<h1>Sensor Dashboard</h1>\n\n\t\t\t\t<div className=\"card_container topbar\">\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"icon\"><img src={temp} alt=\"hot_icon\" width=\"40vw\"/></div>\n\t\t\t\t\t\t<div className=\"title\"><h2>Temperature</h2></div>\n\t\t\t\t\t\t<div className=\"value\"><h2>{this.state.sensors.map(sensor => sensor.temp)[this.state.sensors.length - 1]}</h2></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"icon\"><img src={hum} alt=\"hum_icon\" width=\"40vw\"/></div>\n\t\t\t\t\t\t<div className=\"title\"><h2>Humidity</h2></div>\n\t\t\t\t\t\t<div className=\"value\"><h2>{this.state.sensors.map(sensor => sensor.hum)[this.state.sensors.length - 1]}</h2></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"icon\"><img src={light} alt=\"light_icon\" width=\"40vw\"/></div>\n\t\t\t\t\t\t<div className=\"title\"><h2>Ambient Light</h2></div>\n\t\t\t\t\t\t<div className=\"value\"><h2>{this.state.sensors.map(sensor => sensor.light)[this.state.sensors.length - 1]}</h2></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"card_container\">\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t<div className=\"chart\" height=\"600px\">\n\t\t\t\t\t\t\t<Line data = {{\n\t\t\t\t\t\t\t\t//labels: this.state.sensors.map(sensor => sensor.Date.split()),\n\t\t\t\t\t\t\t\tlabels: [1, 2, 3, 4, 5, 6],\n\t\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\t\tlabel: 'Temperature',\n\t\t\t\t\t\t\t\t\tdata: this.state.sensors.map(sensor => sensor.temp),\n\t\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(54, 162, 235, 0.2)',\n\n\t\t\t\t\t\t\t\t\tborderColor: 'rgba(54, 162, 235, 1)',\n\t\t\t\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\theight={250}\n\t\t\t\t\t\t\toptions = {{\n\t\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\t\tresponsiveAnimationDuration: 400,\n\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\t\txAxes: [{ \n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t\t<Bar data = {{\n\t\t\t\t\t\t\t\t//labels: this.state.sensors.map(sensor => sensor.id),\n\t\t\t\t\t\t\t\tlabels: [1, 2, 3, 4, 5, 6],\n\t\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\t\tlabel: 'Humidity',\n\t\t\t\t\t\t\t\t\tdata: this.state.sensors.map(sensor => sensor.hum),\n\t\t\t\t\t\t\t\t\tbackgroundColor: [\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 99, 132, 0.2)',\n\t\t\t\t\t\t\t\t\t\t'rgba(54, 162, 235, 0.2)',\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 206, 86, 0.2)',\n\t\t\t\t\t\t\t\t\t\t'rgba(75, 192, 192, 0.2)',\n\t\t\t\t\t\t\t\t\t\t'rgba(153, 102, 255, 0.2)',\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 159, 64, 0.2)'\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tborderColor: [\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 99, 132, 1)',\n\t\t\t\t\t\t\t\t\t\t'rgba(54, 162, 235, 1)',\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 206, 86, 1)',\n\t\t\t\t\t\t\t\t\t\t'rgba(75, 192, 192, 1)',\n\t\t\t\t\t\t\t\t\t\t'rgba(153, 102, 255, 1)',\n\t\t\t\t\t\t\t\t\t\t'rgba(255, 159, 64, 1)'\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\theight={250}\n\t\t\t\t\t\t\toptions = {{\n\t\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\t\tresponsiveAnimationDuration: 400,\n\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\t\txAxes: [{ \n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t\t<Line data = {{\n\t\t\t\t\t\t\t\t//labels: this.state.sensors.map(sensor => sensor.id),\n\t\t\t\t\t\t\t\tlabels: [1, 2, 3, 4, 5, 6],\n\t\t\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\t\t\tlabel: 'Ambient Light',\n\t\t\t\t\t\t\t\t\tdata: this.state.sensors.map(sensor => sensor.light),\n\t\t\t\t\t\t\t\t\tbackgroundColor: \n\t\t\t\t\t\t\t\t\t\t'rgba(75, 192, 192, 0.2)',\n\t\t\t\t\t\t\t\t\tborderColor:\n\t\t\t\t\t\t\t\t\t\t'rgba(75, 192, 192, 1)',\n\t\t\t\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Temperature',\n\t\t\t\t\t\t\t\t\tdata: this.state.sensors.map(sensor => sensor.temp),\n\t\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(54, 162, 235, 0.1)',\n\n\t\t\t\t\t\t\t\t\tborderColor: 'rgba(54, 162, 235, 1)',\n\t\t\t\t\t\t\t\t\tborderWidth: 1\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\theight={250}\n\t\t\t\t\t\t\toptions = {{\n\t\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\t\tresponsiveAnimationDuration: 400,\n\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\t\txAxes: [{ \n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\t\t\t\t\t\tcolor: \"#666\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\tfontColor: \"#999\"\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<footer>\n\t\t\t\t<a href=\"https://github.com/atick-faisal/Sensor-Dashboard\">Documentation</a>\n\t\t\t\t&nbsp;&nbsp;&nbsp;.&nbsp;&nbsp;&nbsp;\n\t\t\t\t<a href=\"https://github.com/atick-faisal/Sensor-Dashboard/blob/master/api_reference.md\">Reference</a>\n\t\t\t\t<p>&copy; Atick Faisal, 2019</p>\n\t\t\t</footer>\n\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/temp.d10d3c5d.svg\";","module.exports = __webpack_public_path__ + \"static/media/hum.bfed69ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/light.2d989748.svg\";"],"sourceRoot":""}